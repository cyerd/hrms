// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  email                    String    @unique
  name                     String?
  bio                      String?
  hashedPassword           String?
  role                     Role      @default(EMPLOYEE)
  isActive                 Boolean   @default(false)
  emailVerified            DateTime?
  image                    String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  resetPasswordToken       String?   @unique
  resetPasswordTokenExpiry DateTime?
  dateOfBirth              DateTime?
  gender                   Gender?

  // Leave Balances
  annualLeaveBalance        Float @default(21)
  sickLeaveBalance          Float @default(10)
  maternityLeaveBalance     Float @default(90)
  paternityLeaveBalance     Float @default(14)
  compassionateLeaveBalance Float @default(5)
  unpaidLeaveBalance        Float @default(0)

  leaveRequests        LeaveRequest[]
  overtimeRequests     OvertimeRequest[]
  notifications        Notification[]    @relation("UserNotifications")
  createdNotifications Notification[]    @relation("CreatedByNotifications")
}

model LeaveRequest {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  userId     String        @db.ObjectId
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType  LeaveType
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  approvedBy String?
  deniedBy   String?
}

model OvertimeRequest {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  userId     String        @db.ObjectId
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  date       DateTime
  hours      Float
  reason     String
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  approvedBy String?
  deniedBy   String?
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  message   String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  createdBy String   @db.ObjectId
  creator   User     @relation("CreatedByNotifications", fields: [createdBy], references: [id], onDelete: Cascade)
}

enum Role {
  EMPLOYEE
  HR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum LeaveType {
  ANNUAL
  SICK
  MATERNITY
  PATERNITY
  COMPASSIONATE
  UNPAID
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}
